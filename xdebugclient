#!/usr/bin/php
<?php

class XDebugClient {
    protected $socket;
    protected $transaction_id = 1;
    protected $status = 'starting';
    protected $current_file = '';
    protected $current_line = '';
    protected $socket_buffer = '';

    /**
     * List of set Breakpoint.
     */
    protected $breakpoints = array();

    function __construct($uri) {
        $this->uri = $uri;
    }

    function run() {
        // We'll handle XML errors ourselves, to avoid it spewing
        // warnings all over the place.
        libxml_use_internal_errors(true);
        // @todo error handling.
        $server = stream_socket_server($this->uri, $errno, $errstr);

        $this->puts("Waiting for connection...");
        $this->socket = stream_socket_accept($server);
        // $this->socket->selectRead(60);
        $packet = fread($this->socket, 4096);
        // Strip null byte an verify.
        $res = $this->parseResponse(substr($packet, 0, -1));
        if (!$res) {
            $this->puts('Error parsing init packet, exiting.');
            $this->exit(1);
        }
        if ($res['protocol_version'] != '1.0') {
            $this->puts('Unsupported protocol version.');
            $this->exit(1);
        }
        if ($res->engine) {
            $this->puts('> ' . (string) $res->engine . ' (' . $res->engine['version'] . ')');
        }
        if ($res->url) {
            $this->puts('> ' . (string) $res->url);
        }
        if ($res->author) {
            $this->puts('> by ' . (string) $res->author);
        }
        if ($res->copyright) {
            $this->puts('> ' . (string) $res->copyright);
        }
        if ($res['fileuri']) {
            $this->current_file = $res['fileuri'];
        }
        $this->puts("Connected.");
        $this->puts("Type 'help' for command list.");

        // We have no further need for the server socket.
        fclose($server);

        stream_set_blocking(STDIN, 0);

        $exit = false;
        $socket_buffer = '';
        $input_buffer = '';
        do {
            $read = array(STDIN);
            $write = array();
            $except = array();
            // Check if there's already data ready to read.
            $result = stream_select($read, $write, $except, 0);
            if ($result === false) {
                $this->puts("Error using select.");
                $this->quit(1);
            }
            elseif ($result === 0) {
                $this->prompt();
                // Wait until there's something to read.
                $read = array(STDIN);
                $result = stream_select($read, $write, $except, null);
            }

            if (($input = fread(STDIN, 4096)) or $input_buffer) {
                if ($input) {
                    $input_buffer .= $input;
                }
                $t = explode("\n", $input_buffer, 2);
                if (sizeof($t) > 1) {
                    list($cmd, $rest) = $t;
                    $input_buffer = $rest;
                    if (preg_match('/^q(uit)?/', $cmd)) {
                        fwrite($this->socket, 'detach' . "\0");
                        $this->puts("Exiting.");
                        $this->quit();
                    }
                    $this->handleCommand($cmd);
                }
            }
        } while (!$exit);
    }

    function sendCommand($cmd) {
        if (is_array($cmd)) {
            $cmd = implode(' ', $cmd);
        }
        $txn_id = ($this->transaction_id++);
        // Add in a transaction id.
        $cmd .= ' -i ' . $txn_id;
        fwrite($this->socket, $cmd . "\0");

        $done = FALSE;
        while (!$done) {
            while (preg_match('/^(.*?\0.*?)\0(.*)$/s', $this->socket_buffer, $matches)) {
                $packet = $matches[1];
                $this->socket_buffer = $matches[2];
                $res = $this->parseResponse($packet);
                $result = null;
                if ($res) {
                    if ($res['transaction_id'] and $res['transaction_id'] == $txn_id) {
                        // @todo some handling of resposes with
                        //   another transaction id.
                        $done = true;
                    }
                    if ($this->commonResposeHandling($res)) {
                        // Non-error response.
                        $result = $res;
                    }
                    else {
                        // Errors doesn't have a transaction id, so we
                        // can't tell exactly which command failed. So
                        // we have to assume it was the one we just
                        // sent.
                        $done = true;
                    }
                }
            }
            if (!$done) {
                $to_read = 4096;
                if (preg_match('/^(.*?)\0/s', $this->socket_buffer, $matches)) {
                    // If we already read the start of the packet, we
                    // can calculate how much to read.
                    $xml_size = $matches[1];
                    // Total size is the size of the XML payload, the
                    // number and two null bytes.
                    $total_read = $xml_size + strlen($xml_size) + 2;
                    $to_read = $total_read - strlen($this->socket_buffer);
                }
                $this->socket_buffer .= fread($this->socket, $to_read);
            }
        }

        return $result;
    }

    function parseResponse($packet) {
        // Every packet starts with a lenght of the following XML data.
        if (!preg_match('/^([0-9]+)\0(.*)$/s', $packet, $matches)) {
            $this->puts("Malformed server packet:");
            $this->puts($packet);
            $this->quit(1);
        }
        // Double safetycheck.
        if (strlen($matches[2]) != $matches[1]) {
            $this->puts("Malformed server packet, wrong length:");
            $this->puts($packet);
            $this->quit(1);
        }
        // No PHP XML parsers seems to like XDebugs <?xml version="1.0"
        // encoding="iso-8859-1"? > header, oddly enough. So we strip it.
        $xml = $matches[2];
        $lines = explode("\n", $matches[2]);
        array_shift($lines);
        $xml = implode("\n", $lines);
        try {
            $res = new SimpleXMLElement($xml);
        }
        catch (Exception $e) {
            $this->puts('Exception: ' . $e->getMessage());
            $res = null;
        }
        if ($errors = libxml_get_errors()) {
            $this->puts('Errors parsing XML response.');
            foreach ($errors as $error) {
                $this->puts(print_r($error, true));
            }
            $this->puts("Raw XML data:");
            $this->puts($xml);
        }
        return $res;
    }

    function handleCommand($cmd) {
        // Empty line, or ones just containing whitespace is
        // interpreted as step_into.
        if (trim($cmd) == "") {
            $cmd = "step_into";
        }

        $aliases = array(
            's' => 'step_into',
            'n' => 'step_over',
            'f' => 'step_out',
            'r' => 'run',
            'p' => 'print',
            'bt' => 'backtrace',
            '?' => 'help',
        );
        // Extract command name.
        $parts = explode(' ', $cmd);
        if (isset($aliases[$parts[0]])) {
            $parts[0] = $aliases[$parts[0]];
        }

        $valid_states = array(
            'step_over' => array('break'),
            'run' => array('break', 'stating'),
            'step_into' => array('break', 'stating'),
            'step_out' => array('break', 'starting', 'stopping'),
        );

        // @todo this switch could be replaced by a much more sexy
        //   command definition-plugin system, however, it works for
        //   now.
        switch ($parts[0]) {
        case 'step_into':
        case 'step_over':
        case 'step_out':
        case 'run':
            // Check state.
            if (!in_array($this->status, $valid_states[$parts[0]])) {
                $this->puts($parts[0] . ' only valid in states: ' . implode(', ', $valid_states[$parts[0]]) . '.');
                break;
            }
            $res = $this->sendCommand($parts);
            if (!$res['reason'] == 'ok') {
                $this->puts('Unknown error happended.');
            }
            break;
        case 'status':
            $res = $this->sendCommand($parts);
            if (!$res['reason'] == 'ok') {
                $this->puts('Unknown error happended.');
            }
            else {
                $this->puts('Status: ' . $res['status']);
            }
            break;
        case 'break':
            $error = false;
            if (sizeof($parts) != 2) {
                $error = true;
            }
            else {
                $file_parts = explode(':', $parts[1]);
                if (sizeof($parts) != 2) {
                    $error = true;
                }
            }
            if ($error) {
                $this->puts("Syntax error.");
                $this->puts("Usage: break <filename>:<linenumber>");
                return null;
            } else {
                $cmd = 'breakpoint_set -t line -f file://' . $file_parts[0] . ' -n ' . $file_parts[1];
                $res = $this->sendCommand($cmd);
                if ($res['id']) {
                    $this->breakpoints[] = $res['id'];
                    $num = sizeof($this->breakpoints);
                    $this->puts('Breakpoint ' . $num . ' set at line ' . $file_parts[1] . ' in ' . $file_parts[0]);
                }
                else {
                    $this->puts('Unknown error setting breakpoint.');
                }
            }
            break;
        case 'print':
            if (sizeof($parts) == 1) {
                $contexts = $this->sendCommand('context_names');
                foreach ($contexts->context as $context) {
                    $this->puts($context['name']);
                    $vars = $this->sendCommand('context_get -c ' . $context['id']);
                    foreach ($vars as $property) {
                        $this->puts('  ' . $property['fullname'] . ' ' . $this->printProperty($property));
                    }
                }
            }
            else {
                // Relying on the undocumented fact that XDebug isn't
                // picky about the proper context being passed.
                array_shift($parts);
                array_unshift($parts, '-n');
                array_unshift($parts, 'property_get');
                $res = $this->sendCommand(implode(' ', $parts));
                if ($res) {
                    $this->puts($this->printProperty($res->property[0], true));
                }
            }
            break;
        case 'backtrace':
            $stack = $this->sendCommand('stack_get');
            foreach ($stack as $frame) {
                if ($frame['type'] == 'file') {
                    $this->puts($frame['where'] . ' ' . preg_replace('{^file://}', '', $frame['filename']) . ':' . $frame['lineno']);
                }
                elseif ($frame['type'] == 'eval') {
                    $this->puts('eval line ' . $frame['lineno']);
                }
            }
            break;
        case '!':
            array_shift($parts);
            $res = $this->sendCommand(implode(' ', $parts));
            if ($res) {
                $this->puts("XML response:");
                $this->puts((string) $res->asXml());
            }
            break;
        case '?, help':
            $commands = array(
                's, step_into' => 'Step into next instruction.',
                'n, step_over' => 'Step over the next instruction.',
                'f, step_out' => 'Run until out of the current function.',
                'r, run' => 'Run to next breakpoint or end of code.',
                'status' => 'Show current state.',
                'break <file>:<line number>' => 'Set breakpoint.',
                'p, print [variable]' => 'Show variables and variable values. ',
                'bt, backtrace' => 'Show backtrace.',
                '! <command>' => 'Raw XDebug command.',
                '?, help' => 'This help.',
            );
            foreach ($commands as $command => $desc) {
                $this->puts($command . ':');
                $this->puts(' ' . $desc);
                $this->puts();
            }
            break;
        default:
            $this->puts("Unknown command.");
        }
    }

    function commonResposeHandling($res) {
        $root_element = $res->getName();
        $transaction_info = null;
        if ($root_element == 'stream') {
            $this->puts("Got some data. Implement this.");
        }
        elseif ($root_element == 'response') {
            if ($res->error) {
                $this->puts('Error: ' . $res->error->message);
                return false;
            }
            else {
                if ($res['status']) {
                    $this->status = $res['status'];
                }
                // Get elements from the XDebug namespace.
                $xdebug = $res->children('http://xdebug.org/dbgp/xdebug');
                if ($xdebug->message) {
                    // Get the attributes without a namespace.
                    $message = $xdebug->message->attributes('');
                    if ($message['filename']) {
                        $this->current_file = $message['filename'];
                    }
                    if ($message['lineno']) {
                        $this->current_line = $message['lineno'];
                    }
                }
            }
        }
        else {
            $this->puts('Malformed response.');
            $this->puts((string) $res);
        }
        return true;
    }

    function printProperty($prop, $full = false) {
        $meta = '';
        if ($prop['facet']) {
            $meta = $prop['facet'] . ' ';
        }

        switch ($prop['type']) {
        case 'uninitialized':
            $dump = '<uninitialized>';
            break;
        case 'bool':
            $dump = (string) $prop ? 'TRUE' : 'FALSE';
            break;
        case 'string':
            $dump = '"' . base64_decode((string) $prop) . '"';
            break;
        case 'int':
            $dump = (string) $prop;
            break;
        case 'float':
            $dump = (string) $prop;
            break;
        case 'array':
            $i = 0;
            $items = array();
            foreach ($prop->property as $property) {
                if ($full) {
                    $items[] = $property['name'] . ' => ' . $this->printProperty($property);
                }
                else {
                    if ($i > 2) {
                        $items[] = '...';
                        break;
                    }
                    $items[] = $property['name'];
                    $i++;
                }
            }
            if ($full) {
                $dump = "array(\n  " . implode(",\n  ", $items). "\n)";
            }
            else {
                $dump = 'array( ' . implode(', ', $items). ' )';
            }
            break;
        case 'object':
            $items = array();
            if ($full) {
            foreach ($prop->property as $property) {
                if ($full) {
                    $items[] = $property['name'] . ': ' . $this->printProperty($property);
                }
                else {
                    if ($i > 2) {
                        $items[] = '...';
                        break;
                    }
                    $items[] = $property['name'];
                    $i++;
                }
            }
                $dump = $prop['classname'] . "(\n  " . implode(",\n  ", $items). "\n)";
            }
            else {
                $dump = 'object: ' . $prop['classname'];
            }
            break;
        default:
            $dump = 'Unknown data type. Update printProperty.';
            break;
        }
        return $meta . ($full ? "\n" : '') . $dump;
    }

    function quit($code = 0) {
        fclose($this->socket);
        exit($code);
    }

    function puts($string = '') {
        echo $string . "\n";
    }

    function prompt() {
        $prompt = '';
        if ($this->current_file) {
            $prompt = $this->current_file;
        }
        if ($this->current_line) {
            $prompt .= ':' . $this->current_line;
        }
        echo $prompt . "> ";
    }
}

$client = new XDebugClient("tcp://0.0.0.0:9000");
$client->run();
